{"version":3,"sources":["contexts/storeContext.js","store/api.js","store/bugs.js","components/Bugs.jsx","store/projects.js","store/users.js","store/entities.js","store/reducer.js","store/middleware/logger.js","store/middleware/toast.js","store/middleware/api.js","App.js","store/configureStore.js","reportWebVitals.js","index.js"],"names":["StoreContext","createContext","apiCallBegan","createAction","apiCallSuccess","apiCallFailed","slice","createSlice","name","initialState","list","loading","lastFetch","reducers","bugsRequested","bugs","action","bugsReceived","payload","Date","now","bugsRequestFailed","bugAssignedToUser","bugId","id","userId","index","findIndex","bug","bugAdded","push","bugResolved","resolved","actions","url","createSelector","state","entities","projects","filter","Bugs","store","this","context","unsubscribe","subscribe","bugsInStore","getState","setState","dispatch","moment","diff","onStart","type","onSuccess","onError","map","b","description","Component","contextType","lastId","projectAdded","userAdded","users","combineReducers","bugsReducer","projectsReducer","usersReducer","entitiesReducer","logger","param","next","console","log","toast","message","api","a","method","data","axios","request","baseURL","response","configureStore","reducer","middleware","getDefaultMiddleware","destination","App","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ed75ff9.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nconst StoreContext = createContext();\r\n\r\nexport default StoreContext;","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const apiCallBegan = createAction(\"api/callBegan\");\nexport const apiCallSuccess = createAction(\"api/callSuccess\");\nexport const apiCallFailed = createAction(\"api/callFailed\");\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from \"reselect\";\nimport { apiCallBegan } from \"./api\";\nimport moment from \"moment\";\n\nconst slice = createSlice({\n  name: \"bugs\",\n  initialState: {\n    list: [],\n    loading: false,\n    lastFetch: null\n  },\n  reducers: {\n    bugsRequested: (bugs, action) => {\n      bugs.loading = true;\n    },\n\n    bugsReceived: (bugs, action) => {\n      bugs.list = action.payload;\n      bugs.loading = false;\n      bugs.lastFetch = Date.now();\n    },\n\n    bugsRequestFailed: (bugs, action) => {\n      bugs.loading = false;\n    },\n\n    bugAssignedToUser: (bugs, action) => {\n      const { id: bugId, userId } = action.payload;\n      const index = bugs.list.findIndex(bug => bug.id === bugId);\n      bugs.list[index].userId = userId;\n    },\n\n    // command - event\n    // addBug - bugAdded\n    bugAdded: (bugs, action) => {\n      bugs.list.push(action.payload);\n    },\n\n    // resolveBug (command) - bugResolved (event)\n    bugResolved: (bugs, action) => {\n      const index = bugs.list.findIndex(bug => bug.id === action.payload.id);\n      bugs.list[index].resolved = true;\n    }\n  }\n});\n\nexport const {\n  bugAdded,\n  bugResolved,\n  bugAssignedToUser,\n  bugsReceived,\n  bugsRequested,\n  bugsRequestFailed\n} = slice.actions;\nexport default slice.reducer;\n\n// Action Creators\nconst url = \"/bugs\";\n\nexport const loadBugs = () => (dispatch, getState) => {\n  const { lastFetch } = getState().entities.bugs;\n\n  const diffInMinutes = moment().diff(moment(lastFetch), \"minutes\");\n  if (diffInMinutes < 10) return;\n\n  return dispatch(\n    apiCallBegan({\n      url,\n      onStart: bugsRequested.type,\n      onSuccess: bugsReceived.type,\n      onError: bugsRequestFailed.type\n    })\n  );\n};\n\nexport const addBug = bug =>\n  apiCallBegan({\n    url,\n    method: \"post\",\n    data: bug,\n    onSuccess: bugAdded.type\n  });\n\nexport const resolveBug = id =>\n  apiCallBegan({\n    // /bugs\n    // PATCH /bugs/1\n    url: url + \"/\" + id,\n    method: \"patch\",\n    data: { resolved: true },\n    onSuccess: bugResolved.type\n  });\n\nexport const assignBugToUser = (bugId, userId) =>\n  apiCallBegan({\n    url: url + \"/\" + bugId,\n    method: \"patch\",\n    data: { userId },\n    onSuccess: bugAssignedToUser.type\n  });\n\n// Selector\n\n// Memoization\n// bugs => get unresolved bugs from the cache\n\nexport const getBugsByUser = userId =>\n  createSelector(\n    state => state.entities.bugs,\n    bugs => bugs.filter(bug => bug.userId === userId)\n  );\n\nexport const getUnresolvedBugs = createSelector(\n  state => state.entities.bugs,\n  state => state.entities.projects,\n  (bugs, projects) => bugs.list.filter(bug => !bug.resolved)\n);\n","import { Component } from 'react';\r\nimport StoreContext from '../contexts/storeContext';\r\nimport { loadBugs } from '../store/bugs';\r\n\r\nclass Bugs extends Component {\r\n  static contextType = StoreContext;\r\n\r\n  state = {bugs: []};\r\n\r\n  componentDidMount() {\r\n    const store = this.context;\r\n\r\n    this.unsubscribe = store.subscribe(() => {\r\n      const bugsInStore = store.getState().entities.bugs.list;\r\n      if (this.state.bugs !== bugsInStore) {\r\n        this.setState({ bugs: bugsInStore})\r\n      }      \r\n    });\r\n\r\n    store.dispatch(loadBugs());\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  }\r\n\r\n  render() { \r\n    return ( \r\n      <ul>\r\n        {this.state.bugs.map(b => (\r\n          <li key={b.id}>{b.description}</li>\r\n        ))}        \r\n      </ul>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Bugs;","import { createSlice } from \"@reduxjs/toolkit\";\n\nlet lastId = 0;\n\nconst slice = createSlice({\n  name: \"projects\",\n  initialState: [],\n  reducers: {\n    // action => action handler\n    projectAdded: (projects, action) => {\n      projects.push({\n        id: ++lastId,\n        name: action.payload.name\n      });\n    }\n  }\n});\n\nexport const { projectAdded } = slice.actions;\n\nexport default slice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nlet lastId = 0;\n\nconst slice = createSlice({\n  name: \"users\",\n  initialState: [],\n  reducers: {\n    // action => action handler\n    userAdded: (users, action) => {\n      users.push({\n        id: ++lastId,\n        name: action.payload.name\n      });\n    }\n  }\n});\n\nexport const { userAdded } = slice.actions;\n\nexport default slice.reducer;\n","import { combineReducers } from \"redux\";\nimport bugsReducer from \"./bugs\";\nimport projectsReducer from \"./projects\";\nimport usersReducer from \"./users\";\n\nexport default combineReducers({\n  bugs: bugsReducer,\n  projects: projectsReducer,\n  users: usersReducer\n});\n","import { combineReducers } from \"redux\";\nimport entitiesReducer from \"./entities\";\n\nexport default combineReducers({\n  entities: entitiesReducer\n});\n","// SNA\nconst logger = param => store => next => action => {\n  console.log(\"Logging\", param);\n  return next(action);\n  // logger > toast > api\n};\n\nexport default logger;\n\n// Currying\n// N => 1\n","const toast = store => next => action => {\n  if (action.type === \"error\") console.log(\"Toastify\", action.payload.message);\n  else return next(action);\n};\n\nexport default toast;\n","import axios from \"axios\";\nimport * as actions from \"../api\";\n\nconst api = ({ dispatch }) => next => async action => {\n  if (action.type !== actions.apiCallBegan.type) return next(action);\n\n  const { url, method, data, onStart, onSuccess, onError } = action.payload;\n\n  if (onStart) dispatch({ type: onStart });\n\n  next(action);\n\n  try {\n    const response = await axios.request({\n      baseURL: \"http://localhost:3000/api\",\n      url,\n      method,\n      data\n    });\n    // General\n    dispatch(actions.apiCallSuccess(response.data));\n    // Specific\n    if (onSuccess) dispatch({ type: onSuccess, payload: response.data });\n  } catch (error) {\n    // General\n    dispatch(actions.apiCallFailed(error.message));\n    // Specific\n    if (onError) dispatch({ type: onError, payload: error.message });\n  }\n};\n\nexport default api;\n","\nimport './App.css';\nimport Bugs from './components/Bugs';\nimport configureStore from './store/configureStore';\nimport StoreContext from './contexts/storeContext';\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <StoreContext.Provider value={store}>\n      <Bugs />\n    </StoreContext.Provider>\n  );\n}\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport reducer from \"./reducer\";\nimport logger from \"./middleware/logger\";\nimport toast from \"./middleware/toast\";\nimport api from \"./middleware/api\";\n\nconst configure = function() {\n  return configureStore({\n    reducer,\n    middleware: [\n      ...getDefaultMiddleware(),\n      logger({ destination: \"console\" }),\n      toast,\n      api\n    ]\n  });\n}\n\nexport default configure;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}